/*
-----------------------------------------------------------------------------
This source file is a part of geek
(Game Engine Extensible Kit)
For the latest info, see http://gdgeek.com/

GEEK (www.gdgeek.com) is made available under the MIT License.

Copyright (c) 2010-2011 http://gdgeek.com/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/

////////////////////////////////////////////////////////////////////////
///  
/// @file       test.hpp
/// @brief      
/// @details    
/// @version    0.99a
/// @author     RD
/// @date       2011/10/14
///////////////////////////////////////////////////////////////////////

#ifndef GEEK_@name_toupper@_COMPONENT_TEST_HPP
#define GEEK_@name_toupper@_COMPONENT_TEST_HPP


// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif



#include <boost/test/unit_test.hpp>
//#include <geek/view_ogre_opcode/ogre_opcode_manager.hpp>

using namespace geek;
  
///用于作为测试环境的geek框架
struct unit_test_environment{
	unit_test_environment(void) 
	{ 
		
		//logMgr.reset(new TestLogSystem());
		system_.reset(new system_by_functor<>());
		system_->add_common_view();


		boost::shared_ptr<ogre_graphics_manager> ogre_ptr(new ogre_graphics_manager());
		system_->push_obj(ogre_ptr)
			.add_update(boost::bind(&ogre_graphics_manager::update, ogre_ptr.get(), _1))
			.add_init(boost::bind(&ogre_graphics_manager::init, ogre_ptr.get()))
			.add_shutdown(boost::bind(&ogre_graphics_manager::shutdown, ogre_ptr.get()));

		ogre_ptr->no_output();

		boost::shared_ptr<ois_input_manager> ois_ptr(new ois_input_manager());
		system_->push_obj(ois_ptr)
			.add_update(boost::bind(&ois_input_manager::update, ois_ptr.get(), _1))
			.add_init(boost::bind(&ois_input_manager::init, ois_ptr.get()))
			.add_shutdown(boost::bind(&ois_input_manager::shutdown, ois_ptr.get()));


		boost::shared_ptr<cegui_manager> cegui_ptr(new cegui_manager());
		system_->push_obj(cegui_ptr)
			.add_update(boost::bind(&cegui_manager::update, cegui_ptr.get(), _1))
			.add_init(boost::bind(&cegui_manager::init, cegui_ptr.get()))
			.add_shutdown(boost::bind(&cegui_manager::shutdown, cegui_ptr.get()));


		boost::shared_ptr<camera_man> camera_ptr(new camera_man());
		system_->push_obj(camera_ptr)
			.add_update(boost::bind(&camera_man::update, camera_ptr.get(), _1))
			.add_init(boost::bind(&camera_man::init, camera_ptr.get()))
			.add_shutdown(boost::bind(&camera_man::shutdown, camera_ptr.get()));

/*
		boost::shared_ptr<ogre_opcode_manager> oop_ptr(new ogre_opcode_manager());
		system_->push_obj(oop_ptr)
			.add_update(boost::bind(&ogre_opcode_manager::update, oop_ptr.get(), _1))
			.add_init(boost::bind(&ogre_opcode_manager::init, oop_ptr.get()))
			.add_shutdown(boost::bind(&ogre_opcode_manager::shutdown, oop_ptr.get()));
	*/
		system_->init();
		{

		}
// 		_timer = ITimerManager::getSingleton().createTimer(boost::bind(&UnitTestEnvironment::step, this));
// 		_timer->start(10.f);


		test_log_.reset(new std::stringstream());

		{

			namespace logging = boost::log;
			namespace fmt = boost::log::formatters;
			namespace flt = boost::log::filters;
			namespace sinks = boost::log::sinks;
			namespace attrs = boost::log::attributes;
			namespace src = boost::log::sources;
			namespace keywords = boost::log::keywords;
			using boost::shared_ptr;


			// For now we only create a text output sink:
			typedef sinks::synchronous_sink< sinks::text_ostream_backend > text_sink;
			shared_ptr< text_sink > p_sink(new text_sink);


			{
				text_sink::locked_backend_ptr p_backend = p_sink->locked_backend();
				p_backend->add_stream(test_log_);
			}


			geek::log_system::get_instance().add_sink(p_sink);
			p_sink->set_filter( flt::attr< geek::log_system::severity_level >("Severity", std::nothrow) == geek::log_system::trace ); 
		}
		geek::plugins_manager::get_singleton().load_plugin("@name@_component");

	}

	~unit_test_environment(void)
	{ 
		std::cout<<test_log_->str()<<"!"<<std::endl;
		//timer_.reset();
		system_->shutdown();
		system_.reset();
	}


// 	bool step(void)
// 	{
// 		Orz::SystemInterface::getSingleton().exit();
// 		return true;
// 	}
	static boost::scoped_ptr<system_by_functor<> > system_;//(new system_by_functor<>())
	//static SystemPtr system_;
	//static boost::shared_ptr<TestLogSystem> logMgr;
	//boost::shared_ptr<Timer> timer_;
	static boost::shared_ptr< std::stringstream > test_log_;
};
/// geek system
boost::scoped_ptr<system_by_functor<> > unit_test_environment::system_;

boost::shared_ptr< std::stringstream > unit_test_environment::test_log_;
///// 测试日志
//boost::shared_ptr<TestLogSystem> UnitTestEnvironment::logMgr;

///配置全局的环境
BOOST_GLOBAL_FIXTURE( unit_test_environment )


#endif // GEEK_@name_toupper@_COMPONENT_TEST_HPP
